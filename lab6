#include "pch.h"
#include <iostream>

//Структура узлов
typedef struct Node {
	int value;
	struct Node *next, *pred;
} NODE, *pNODE;

//список элементов
typedef struct List {
	pNODE top;
	int len;
} LIST, *pLIST;

//выделение динамической памяти для хранения списка
pLIST createList() {
	pLIST pL;
	pL = (pLIST)malloc(sizeof(LIST));
	if (!pL)
		return NULL;
	pL->top = NULL;
	pL->len = 0;
	return pL;
}

//проверка списка на наличие элементов
int isEmpty(pLIST pL) {
	if (pL->top && pL->len)
		return 0;
	return 1;
}

//определение места вставки следующего узла
pNODE getPointer(pLIST pL, int date) {
	pNODE temp;
	if (isEmpty(pL))
		return NULL;
	else {
		temp = pL->top;
		if (date >= temp->value)
			return temp;
		while (temp->next && temp->next->value > date)
			temp = temp->next;
		return temp;
	}
}

//добавление узла
int addNodeAfter(pLIST pL, pNODE pN, int newdate) {
	pNODE pnew = (pNODE)malloc(sizeof(NODE));
	if (pnew) {
		pL->len++;
		pnew->value = newdate;
		if (isEmpty(pL) || newdate >= pL->top->value) {
			pnew->next = pL->top;
			pnew->pred = NULL;
			if (!isEmpty(pL))
				pL->top->pred = pnew;
			pL->top = pnew;
			return 1;
		}
		if (!(pN->next)) {
			pnew->next = pN->next;
			pnew->pred = pN;
			pN->next = pnew;
			return 1;
		}
		pN->next->pred = pnew;
		pnew->next = pN->next;
		pnew->pred = pN;
		pN->next = pnew;
		return 1;
	}
	return 0;
}

//нахождение узла в списке
pNODE findNode(pLIST pL, int date) {
	pNODE p = pL->top, temp = p;
	if (isEmpty(pL)) return NULL;
	while (temp && temp->value != date) {
		temp = temp->next;
		p = temp;
		
	}
	return p;
}

//удаление узла
int delNode(pLIST pL, pNODE pN) {
	if (!pN)
		return 0;
	pNODE temp = pN->next;
	pN->next = temp->next;
	free(temp);
	pL->len--;
	return 1;
}

//очищение памяти отведенной для списка
void clearList(pLIST pL) {
	if (!isEmpty(pL)) {
		while (pL->top->next)
			delNode(pL, pL->top);
		pL->len--;
		free(pL->top);
	}
}

//удаление списка
void deleteList(pLIST pL) {
	clearList(pL);
	free(pL);
	printf("List was deleted!\n");
}

//вывод списка
void showList(pLIST pL) {
	pNODE temp = pL->top;
	if (isEmpty(pL))
		printf("List is empty!\n");
	else {
		printf("Length list:%d\n", pL->len);
		while (temp) {
			printf_s("Adres: %p \t Element: %d \t Next: %p\n", temp, temp->value, temp->next);
			temp = temp->next;
		}
	}
}


int main()
{
	pNODE p;
	pLIST work_list = createList();
	char exit = 1;
	int com;
	while (exit)
	{
		printf("----------");
		printf("\n1 - add \n2 - find \n3 - delete \n4 - print \n5 - clear list \n0 - exit\n");
		printf("Act: "); scanf_s("%d", &com);
		switch (com) {
		//Выход
		case(0): {
			exit = 0;
			break;
		}
		//Добавление
		case (1): {
			printf("Input value of node: ");
			scanf_s("%d", &com);
			addNodeAfter(work_list, getPointer(work_list, com), com);
			break;
		}
		//Поиск
		case(2): {
			printf("Input number: ");
			scanf_s("%d", &com);
			pNODE to_show = findNode(work_list, com);
			if (to_show)
				printf("Number %d find in List, adres Number:%p\n", com, to_show);
			else
				printf("Number %d not find in List!\n", com);
			break;
		}
		//Удаление
		case(3): {
			printf("Input number: ");
			scanf_s("%d", &com);
			if (!isEmpty(work_list) && com == work_list->top->value) {
				p = work_list->top;
				work_list->top = work_list->top->next;
				free(p);
				work_list->len--;
				printf("Deletes %d complete!\n\n", com);
			}
			else
				if (delNode(work_list, getPointer(work_list, com)))
					printf("Delete %d");
				else
					printf("A integer %d does not contain in list!\n", com);
			break;
		}
		//Печать
		case(4): {
			showList(work_list);
			break;
		}
		//Очистка
		case(5): {
			clearList(work_list);
			showList(work_list);
			break;
		}
				 deleteList(work_list);
				 return 0;
		}
	}
}
